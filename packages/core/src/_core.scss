@use 'sass:map';
@use 'internal' as *;
@use 'variables' as *;
@use 'functions' as *;

@mixin xyz-core() {
  @include xyz-include-once('core') {
    // generates core keyframes
    @include xyz-make-keyframes('keyframes', false) using ($mode) {
      from {
        @include xyz-state($mode);
      }
    }

    // sets defaults for xyz variables
    :root {
      @each $name, $val in $xyz-defaults-map {
        --xyz-#{$name}-default: #{$val};
      }
    }

    // gives elements an xyz-index based on nth child
    %xyz-indexed {
      @for $i from 1 through $xyz-index-levels {
        &:nth-child(#{$i}) {
          --xyz-index: #{$i - 1};
        }
        &:nth-last-child(#{$i}) {
          --xyz-index-rev: #{$i - 1};
        }
      }
    }

    %xyz-root {
      @extend %xyz-indexed;
      --xyz-root-stagger-delay: var(--xyz-stagger-delay, 0s);
      --xyz-nested-stagger-delay: initial;
      --xyz-start-offset: initial;
    }

    %xyz-nested {
      @extend %xyz-indexed;
      --xyz-nested-stagger-delay: var(--xyz-root-stagger-delay, 0s);
    }

    @each $mode in $xyz-modes-animation {
      %xyz-animation-#{$mode} {
        @include xyz-animation($mode);

        &.xyz-absolute, &.xyz-#{$mode}-absolute {
          @extend %xyz-absolute;
        }

        &.xyz-paused, &.xyz-#{$mode}-paused {
          @extend %xyz-animation-paused;
        }

        &.xyz-none, &.xyz-#{$mode}-none {
          @extend %xyz-animation-none;
        }
      }

      // active classes
      .xyz-#{$mode} {
        @extend %xyz-root;

        @extend %xyz-animation-#{$mode};
        & .xyz-nested, .xyz-#{$mode}-nested {
          @extend %xyz-animation-#{$mode};
        }

        &.xyz-paused-all, &.xyz-#{$mode}-paused-all {
          @extend %xyz-animation-paused;
          & .xyz-nested, .xyz-#{$mode}-nested {
            @extend %xyz-animation-paused;
          }
        }

        &.xyz-none-all, &.xyz-#{$mode}-none-all {
          @extend %xyz-animation-none;
          & .xyz-nested, .xyz-#{$mode}-nested {
            @extend %xyz-animation-none;
          }
        }
      }

      // active classes nested
      .xyz-#{$mode}-nested {
        @extend %xyz-nested;
      }
    }

    @each $mode in $xyz-modes-transition {
      %xyz-transition-#{$mode} {
        @include xyz-transition($mode);

        &.xyz-absolute, &.xyz-#{$mode}-absolute {
          @extend %xyz-absolute;
        }

        &.xyz-none, &.xyz-#{$mode}-none {
          @extend %xyz-transition-none;
        }
      }

      // active classes
      .xyz-#{$mode}:hover {
        @extend %xyz-root;

        @extend %xyz-transition-#{$mode};
        & .xyz-nested, .xyz-#{$mode}-nested {
          @extend %xyz-transition-#{$mode};
        }

        &.xyz-none-all, &.xyz-#{$mode}-none-all {
          @extend %xyz-transition-none;
          & .xyz-nested, .xyz-#{$mode}-nested {
            @extend %xyz-transition-none;
          }
        }
      }

      // active classes nested
      .xyz-#{$mode}-nested {
        @extend %xyz-nested;
      }
    }

    // all nested
    .xyz-nested {
      @extend %xyz-nested;
    }

    // so elements don't take space during animation
    %xyz-absolute {
      position: absolute !important;
    }

    // pauses animations
    %xyz-animation-paused {
      animation-play-state: paused !important;
    }

    // turns off animations
    %xyz-animation-none {
      animation: none !important;
    }

    // turns off animations
    %xyz-transition-none {
      transition: none !important;
    }

    // for reduced motion users
    @media (prefers-reduced-motion: reduce) {
      %xyz-reduced-animation {
        animation: none;
      }

      %xyz-reduced-transition {
        transition: none;
      }

      @each $mode in $xyz-modes-animation {
        .xyz-#{$mode}, .xyz-#{$mode} .xyz-nested, .xyz-#{$mode} .xyz-#{$mode}-nested {
          @extend %xyz-reduced-animation;
        }
      }

      @each $mode in $xyz-modes-transition {
        .xyz-#{$mode}, .xyz-#{$mode} .xyz-nested, .xyz-#{$mode} .xyz-#{$mode}-nested {
          @extend %xyz-reduced-transition;
        }
      }
    }

    // resets all xyz variables
    [xyz] {
      @include xyz-set-all(initial);
    }

    // inherits all xyz variables
    [xyz~='inherit'] {
      @include xyz-set-all(inherit);
    }
  }
}
